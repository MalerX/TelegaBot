package com.malerx.bot.data.model;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.malerx.bot.data.entity.Car;
import com.malerx.bot.data.entity.PersistState;
import com.malerx.bot.data.entity.TGUser;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class PassMessage extends OutgoingMessage {
    private final PersistState state;
    private final TGUser user;
    private final Long operatorId;
    private final ObjectMapper mapper;

    public PassMessage(Set<Long> destination, TGUser user, Long operatorId, PersistState state) {
        super(destination);
        this.user = user;
        this.operatorId = operatorId;
        this.mapper = new ObjectMapper();
        this.state = state;
    }

    @Override
    public Collection<Object> send() {
        Collection<Object> messages = new ArrayList<>(createApproveRequest());
        messages.addAll(createUsersMessages());
        return messages;
    }

    private Collection<SendMessage> createUsersMessages() {
        var msg = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –ø—Ä–∏–Ω—è—Ç–æ–º —Ä–µ—à–µ–Ω–∏—è";
        return destination.stream()
                .map(id -> new SendMessage(id.toString(), msg))
                .collect(Collectors.toList());
    }

    private Collection<SendMessage> createApproveRequest() {
        return user.getTenant().getCars().stream()
                .filter(c -> !c.getActive())
                .map(this::createMsg)
                .collect(Collectors.toList());
    }

    private SendMessage createMsg(final Car car) {
        var tenant = user.getTenant();
        var carId = car.getId();
        var txt = """
                –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.
                                
                üßõ: %s
                üè¢: %s
                üöó: %s"""
                .formatted(tenant.toString(), tenant.getAddress().toString(), car.toString());
        var approve = InlineKeyboardButton.builder()
                .text("–†–∞–∑—Ä–µ—à–∏—Ç—å")
                .callbackData(accept())
                .build();

        var decline = InlineKeyboardButton.builder()
                .text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
                .callbackData(deny())
                .build();

        var keyboard = InlineKeyboardMarkup.builder()
                .keyboardRow(List.of(approve, decline))
                .build();
        var msg = new SendMessage();
        msg.setChatId(operatorId);
        msg.setReplyMarkup(keyboard);
        msg.setText(txt);
        return msg;
    }

    private String accept() {
        var accept = new CallbackData(state.getId(), Boolean.TRUE);
        try {
            return mapper.writeValueAsString(accept);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private String deny() {
        var accept = new CallbackData(state.getId(), Boolean.FALSE);
        try {
            return mapper.writeValueAsString(accept);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }
}
